name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy pylint radon bandit

      - name: Run Black (formatting check)
        run: black --check --diff .

      - name: Run isort (import sorting check)
        run: isort --check-only --diff .

      - name: Run Flake8 (linting)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run Pylint
        run: pylint app/ tests/ --exit-zero --output-format=colorized

      - name: Run MyPy (type checking)
        run: mypy app/ --ignore-missing-imports --no-strict-optional

      - name: Code Complexity Check
        run: |
          radon cc app/ -a -nb
          radon mi app/ -nb

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit

      - name: Run Bandit (security linter)
        run: bandit -r app/ -f json -o bandit-report.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Run Safety check
        run: |
          pip install -r requirements.txt
          safety check --json --output safety-report.json || true

      - name: Upload Safety results
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.json

      - name: Run pip-audit
        run: pip-audit || true

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # Unit Tests
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist

      - name: Run unit tests with coverage
        run: |
          pytest tests/ -m "not integration and not performance and not uat" \
            --cov=app --cov-report=xml --cov-report=html \
            --junitxml=test-results/junit.xml -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-results/

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: false

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Run integration tests
        run: |
          pytest tests/ -m "integration" -v --tb=short

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-benchmark

      - name: Run performance tests
        run: |
          pytest tests/ -m "performance" -v --benchmark-only

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: .benchmarks/

  # UAT Tests with Playwright
  uat-tests:
    name: UAT Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest playwright pytest-playwright

      - name: Install Playwright browsers
        run: playwright install --with-deps chromium

      - name: Run UAT tests
        run: |
          pytest tests/uat/ -v --browser chromium --screenshot on --video on

      - name: Upload UAT artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: uat-artifacts
          path: |
            test-results/
            screenshots/
            videos/

  # Build Docker Image (if Dockerfile exists)
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [code-quality, security, unit-tests]
    if: ${{ hashFiles('Dockerfile') != '' }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: lotto-grid-bot:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # All Tests Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, security, unit-tests, integration-tests, performance-tests, uat-tests]
    
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.code-quality.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ]; then
            echo "Critical tests failed!"
            exit 1
          fi
          echo "All critical tests passed!"

  # Create Release (on main branch only)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test-summary
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate version
        id: version
        run: |
          # Simple versioning based on date and commit count
          VERSION=$(date +%Y.%m.%d).$(git rev-list --count HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release Notes
        run: |
          echo "## What's Changed" > release_notes.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD >> release_notes.md

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false